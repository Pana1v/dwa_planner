[0.013s] Invoking command in '/home/panav/ros2_ws/src/dwa_planner/build/dwa_planner': CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:/home/panav/ros2_ws/install/turtlebot3_teleop:/home/panav/ros2_ws/install/turtlebot3_example:/home/panav/ros2_ws/install/python_starter:/home/panav/ros2_ws/install/lidar_proximity_filter:/home/panav/ros2_ws/install/launch_testing_examples:/home/panav/ros2_ws/install/examples_rclpy_pointcloud_publisher:/home/panav/ros2_ws/install/examples_rclpy_minimal_subscriber:/home/panav/ros2_ws/install/examples_rclpy_minimal_service:/home/panav/ros2_ws/install/examples_rclpy_minimal_publisher:/home/panav/ros2_ws/install/examples_rclpy_minimal_client:/home/panav/ros2_ws/install/examples_rclpy_minimal_action_server:/home/panav/ros2_ws/install/examples_rclpy_minimal_action_client:/home/panav/ros2_ws/install/examples_rclpy_guard_conditions:/home/panav/ros2_ws/install/examples_rclpy_executors:/opt/ros/humble /usr/bin/cmake --build /home/panav/ros2_ws/src/dwa_planner/build/dwa_planner
[0.052s] [35m[1mConsolidate compiler generated dependencies of target dwa_node[0m
[0.067s] [ 50%] [32mBuilding CXX object CMakeFiles/dwa_node.dir/src/dwa_node.cpp.o[0m
[1.583s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:64:72:[m[K [01;31m[Kerror: [m[Kexpected identifier before numeric constant
[1.583s]    64 | distribution<double>> speed_dist([01;31m[K0[m[K,max_speed);
[1.583s]       |                                  [01;31m[K^[m[K
[1.583s] 
[1.583s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:64:72:[m[K [01;31m[Kerror: [m[Kexpected â€˜[01m[K,[m[Kâ€™ or â€˜[01m[K...[m[Kâ€™ before numeric constant
[1.584s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:65:75:[m[K [01;31m[Kerror: [m[Kexpected identifier before â€˜[01m[K-[m[Kâ€™ token
[1.584s]    65 | tribution<double>> rotation_dist([01;31m[K-[m[Kmax_rotation_speed, max_rotation_speed);
[1.584s]       |                                  [01;31m[K^[m[K
[1.584s] 
[1.584s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:65:75:[m[K [01;31m[Kerror: [m[Kexpected â€˜[01m[K,[m[Kâ€™ or â€˜[01m[K...[m[Kâ€™ before â€˜[01m[K-[m[Kâ€™ token
[1.596s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:[m[K In constructor â€˜[01m[KDWA_node::DWA_node()[m[Kâ€™:
[1.596s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:43:5:[m[K [01;31m[Kerror: [m[Kinvalid use of member function â€˜[01m[Kstd::unique_ptr<std::uniform_real_distribution<double> > DWA_node::speed_dist(int)[m[Kâ€™ (did you forget the â€˜[01m[K()[m[Kâ€™ ?)
[1.596s]    43 |     [01;31m[Kspeed_dist[m[K = std::make_unique<std::uniform_real_distribution<double>>(0, max_speed);
[1.596s]       |     [01;31m[K^~~~~~~~~~[m[K
[1.596s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:44:5:[m[K [01;31m[Kerror: [m[Kinvalid use of member function â€˜[01m[Kstd::unique_ptr<std::uniform_real_distribution<double> > DWA_node::rotation_dist(int)[m[Kâ€™ (did you forget the â€˜[01m[K()[m[Kâ€™ ?)
[1.596s]    44 |     [01;31m[Krotation_dist[m[K = std::make_unique<std::uniform_real_distribution<double>>(-max_rotation_speed, max_rotation_speed);
[1.596s]       |     [01;31m[K^~~~~~~~~~~~~[m[K
[1.607s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:[m[K In member function â€˜[01m[Kvoid DWA_node::odom_callback(const SharedPtr*)[m[Kâ€™:
[1.607s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:73:9:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kcurrent_odom[m[Kâ€™ was not declared in this scope
[1.607s]    73 |         [01;31m[Kcurrent_odom[m[K = *msg;
[1.607s]       |         [01;31m[K^~~~~~~~~~~~[m[K
[1.612s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:[m[K In member function â€˜[01m[Kvoid DWA_node::scan_callback(const SharedPtr*)[m[Kâ€™:
[1.612s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:84:9:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kcurrent_scan[m[Kâ€™ was not declared in this scope
[1.612s]    84 |         [01;31m[Kcurrent_scan[m[K = *msg;
[1.612s]       |         [01;31m[K^~~~~~~~~~~~[m[K
[1.615s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:85:9:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[KRCLCPP[m[Kâ€™ was not declared in this scope
[1.615s]    85 |         [01;31m[KRCLCPP[m[K(this->get_logger(), "Laser scan received: %d ranges", current_scan.ranges.size());
[1.615s]       |         [01;31m[K^~~~~~[m[K
[1.623s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:[m[K In member function â€˜[01m[Kstd::vector<std::pair<double, double> > DWA_node::motion_ranges(double, double, double, const Odometry&)[m[Kâ€™:
[1.623s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:101:20:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kodom_data[m[Kâ€™ was not declared in this scope; did you mean â€˜[01m[Krandom_data[m[Kâ€™?
[1.623s]   101 |         double x = [01;31m[Kodom_data[m[K.pose.pose.position.x;
[1.623s]       |                    [01;31m[K^~~~~~~~~[m[K
[1.623s]       |                    [32m[Krandom_data[m[K
[1.623s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:103:27:[m[K [01;31m[Kerror: [m[Kexpected primary-expression before â€˜[01m[K.[m[Kâ€™ token
[1.623s]   103 |         double theta = tf2[01;31m[K.[m[KgetYaw(odom_data.pose.pose.orientation);
[1.623s]       |                           [01;31m[K^[m[K
[1.629s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:105:24:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Ktrajectory_length[m[Kâ€™ was not declared in this scope
[1.629s]   105 |         for(int i =0;i<[01;31m[Ktrajectory_length[m[K;i++)
[1.629s]       |                        [01;31m[K^~~~~~~~~~~~~~~~~[m[K
[1.632s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:107:13:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kyaw[m[Kâ€™ was not declared in this scope
[1.632s]   107 |             [01;31m[Kyaw[m[K+=turn_rate * time_step;
[1.632s]       |             [01;31m[K^~~[m[K
[1.636s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:107:18:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kturn_rate[m[Kâ€™ was not declared in this scope; did you mean â€˜[01m[Ktruncate[m[Kâ€™?
[1.636s]   107 |             yaw+=[01;31m[Kturn_rate[m[K * time_step;
[1.636s]       |                  [01;31m[K^~~~~~~~~[m[K
[1.636s]       |                  [32m[Ktruncate[m[K
[1.637s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:103:16:[m[K [01;35m[Kwarning: [m[Kunused variable â€˜[01m[Ktheta[m[Kâ€™ [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wunused-variable-Wunused-variable]8;;[m[K]
[1.637s]   103 |         double [01;35m[Ktheta[m[K = tf2.getYaw(odom_data.pose.pose.orientation);
[1.637s]       |                [01;35m[K^~~~~[m[K
[1.637s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:98:70:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Krotation_speed[m[Kâ€™ [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wunused-parameter-Wunused-parameter]8;;[m[K]
[1.638s]    98 | tion_ranges(double speed, [01;35m[Kdouble rotation_speed[m[K, double time_step, const nav_msgs::msg::Odometry& odom)
[1.638s]       |                           [01;35m[K~~~~~~~^~~~~~~~~~~~~~[m[K
[1.638s] 
[1.638s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:98:135:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kodom[m[Kâ€™ [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wunused-parameter-Wunused-parameter]8;;[m[K]
[1.638s]    98 | e_step, [01;35m[Kconst nav_msgs::msg::Odometry& odom[m[K)
[1.638s]       |         [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~[m[K
[1.638s] 
[1.638s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:[m[K In member function â€˜[01m[Kstd::pair<double, double> DWA_node::path_gen()[m[Kâ€™:
[1.638s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:117:35:[m[K [01;31m[Kerror: [m[Kcannot convert â€˜[01m[Kstd::random_device[m[Kâ€™ to â€˜[01m[Kint[m[Kâ€™
[1.638s]   117 |         double speed = speed_dist([01;31m[Krd[m[K);
[1.638s]       |                                   [01;31m[K^~[m[K
[1.638s]       |                                   [01;31m[K|[m[K
[1.638s]       |                                   [01;31m[Kstd::random_device[m[K
[1.638s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:64:72:[m[K [01;36m[Knote: [m[K  initializing argument 1 of â€˜[01m[Kstd::unique_ptr<std::uniform_real_distribution<double> > DWA_node::speed_dist(int)[m[Kâ€™
[1.638s]    64 | distribution<double>> speed_dist([01;36m[K0[m[K,max_speed);
[1.638s]       |                                  [01;36m[K^[m[K
[1.638s] 
[1.638s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:118:47:[m[K [01;31m[Kerror: [m[Kcannot convert â€˜[01m[Kstd::random_device[m[Kâ€™ to â€˜[01m[Kint[m[Kâ€™
[1.638s]   118 |   double rotation_speed = rotation_dist([01;31m[Krd[m[K);
[1.638s]       |                                         [01;31m[K^~[m[K
[1.638s]       |                                         [01;31m[K|[m[K
[1.638s]       |                                         [01;31m[Kstd::random_device[m[K
[1.638s] 
[1.638s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:65:75:[m[K [01;36m[Knote: [m[K  initializing argument 1 of â€˜[01m[Kstd::unique_ptr<std::uniform_real_distribution<double> > DWA_node::rotation_dist(int)[m[Kâ€™
[1.638s]    65 | tribution<double>> rotation_dist([01;36m[K-[m[Kmax_rotation_speed, max_rotation_speed);
[1.638s]       |                                  [01;36m[K^[m[K
[1.638s] 
[1.638s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:121:64:[m[K [01;31m[Kerror: [m[Kno matching function for call to â€˜[01m[KDWA_node::motion_ranges(double&, double&)[m[Kâ€™
[1.638s]   121 | uble>> trajectory = [01;31m[Kmotion_ranges(speed, rotation_speed)[m[K;
[1.638s]       |                     [01;31m[K~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~[m[K
[1.638s] 
[1.639s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:98:35:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::vector<std::pair<double, double> > DWA_node::motion_ranges(double, double, double, const Odometry&)[m[Kâ€™
[1.639s]    98 |    vector <pair<double, double>> [01;36m[Kmotion_ranges[m[K(double speed, double rotation_speed, double time_step, const nav_msgs::msg::Odometry& odom)
[1.639s]       |                                  [01;36m[K^~~~~~~~~~~~~[m[K
[1.639s] 
[1.639s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:98:35:[m[K [01;36m[Knote: [m[K  candidate expects 4 arguments, 2 provided
[1.639s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:119:16:[m[K [01;35m[Kwarning: [m[Kunused variable â€˜[01m[Ktime_step[m[Kâ€™ [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wunused-variable-Wunused-variable]8;;[m[K]
[1.639s]   119 |         double [01;35m[Ktime_step[m[K = this->get_parameter("time_step").as_double();
[1.639s]       |                [01;35m[K^~~~~~~~~[m[K
[1.642s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:[m[K In member function â€˜[01m[Kdouble DWA_node::collision_avoidance(const std::vector<std::pair<double, double> >&, const LaserScan&, const Odometry&, double)[m[Kâ€™:
[1.642s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:127:12:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kscan[m[Kâ€™ was not declared in this scope; did you mean â€˜[01m[Kscanf[m[Kâ€™?
[1.642s]   127 |         if([01;31m[Kscan[m[K.ranges.empty())
[1.642s]       |            [01;31m[K^~~~[m[K
[1.642s]       |            [32m[Kscanf[m[K
[1.642s] In file included from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:40[m[K,
[1.642s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:24[m[K,
[1.642s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20[m[K,
[1.642s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25[m[K,
[1.642s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18[m[K,
[1.642s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20[m[K,
[1.642s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37[m[K,
[1.642s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25[m[K,
[1.642s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21[m[K,
[1.642s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155[m[K,
[1.643s]                  from [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:1[m[K:
[1.643s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:129:44:[m[K [01;31m[Kerror: [m[Kexpected â€˜[01m[K)[m[Kâ€™ before string constant
[1.643s]   129 |   RCLCPP_WARN(this->get_logger() [01;31m[K"No Laser scan data available"[m[K);
[1.643s]       |                                  [01;31m[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[1.643s] 
[1.643s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:129:13:[m[K [01;36m[Knote: [m[Kto match this â€˜[01m[K([m[Kâ€™
[1.643s]   129 |             [01;36m[KRCLCPP_WARN[m[K(this->get_logger() "No Laser scan data available");
[1.643s]       |             [01;36m[K^~~~~~~~~~~[m[K
[1.643s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:129:13:[m[K [01;31m[Kerror: [m[Ktemplate argument 1 is invalid
[1.643s]   129 |             [01;31m[KRCLCPP_WARN[m[K(this->get_logger() "No Laser scan data available");
[1.643s]       |             [01;31m[K^~~~~~~~~~~[m[K
[1.643s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:129:13:[m[K [01;31m[Kerror: [m[Ktemplate argument 1 is invalid
[1.643s]   129 |             [01;31m[KRCLCPP_WARN[m[K(this->get_logger() "No Laser scan data available");
[1.643s]       |             [01;31m[K^~~~~~~~~~~[m[K
[1.643s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:129:13:[m[K [01;31m[Kerror: [m[Ktemplate argument 1 is invalid
[1.643s]   129 |             [01;31m[KRCLCPP_WARN[m[K(this->get_logger() "No Laser scan data available");
[1.643s]       |             [01;31m[K^~~~~~~~~~~[m[K
[1.643s] In file included from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/logging.hpp:24[m[K,
[1.643s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:40[m[K,
[1.643s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:24[m[K,
[1.643s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20[m[K,
[1.643s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25[m[K,
[1.643s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18[m[K,
[1.643s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20[m[K,
[1.644s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37[m[K,
[1.644s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25[m[K,
[1.644s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21[m[K,
[1.644s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155[m[K,
[1.644s]                  from [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:1[m[K:
[1.644s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:129:44:[m[K [01;31m[Kerror: [m[Kexpected â€˜[01m[K)[m[Kâ€™ before string constant
[1.644s]   129 |   RCLCPP_WARN(this->get_logger() [01;31m[K"No Laser scan data available"[m[K);
[1.644s]       |                                  [01;31m[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[1.644s] 
[1.644s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:129:13:[m[K [01;36m[Knote: [m[Kto match this â€˜[01m[K([m[Kâ€™
[1.644s]   129 |             [01;36m[KRCLCPP_WARN[m[K(this->get_logger() "No Laser scan data available");
[1.644s]       |             [01;36m[K^~~~~~~~~~~[m[K
[1.644s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:129:13:[m[K [01;31m[Kerror: [m[Kexpected â€˜[01m[K)[m[Kâ€™ before â€˜[01m[K}[m[Kâ€™ token
[1.644s]   129 |             [01;31m[KRCLCPP_WARN[m[K(this->get_logger() "No Laser scan data available");
[1.644s]       |             [01;31m[K^~~~~~~~~~~[m[K
[1.644s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:129:13:[m[K [01;36m[Knote: [m[Kto match this â€˜[01m[K([m[Kâ€™
[1.644s]   129 |             [01;36m[KRCLCPP_WARN[m[K(this->get_logger() "No Laser scan data available");
[1.644s]       |             [01;36m[K^~~~~~~~~~~[m[K
[1.644s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:129:13:[m[K [01;31m[Kerror: [m[Kexpected â€˜[01m[K)[m[Kâ€™ before â€˜[01m[K}[m[Kâ€™ token
[1.644s]   129 |             [01;31m[KRCLCPP_WARN[m[K(this->get_logger() "No Laser scan data available");
[1.644s]       |             [01;31m[K^~~~~~~~~~~[m[K
[1.644s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:129:13:[m[K [01;36m[Knote: [m[Kto match this â€˜[01m[K([m[Kâ€™
[1.644s]   129 |             [01;36m[KRCLCPP_WARN[m[K(this->get_logger() "No Laser scan data available");
[1.645s]       |             [01;36m[K^~~~~~~~~~~[m[K
[1.645s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:129:13:[m[K [01;31m[Kerror: [m[Kexpected primary-expression before â€˜[01m[K}[m[Kâ€™ token
[1.645s]   129 |             [01;31m[KRCLCPP_WARN[m[K(this->get_logger() "No Laser scan data available");
[1.645s]       |             [01;31m[K^~~~~~~~~~~[m[K
[1.647s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:140:28:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kscan_data_[m[Kâ€™ was not declared in this scope; did you mean â€˜[01m[Kscan_data[m[Kâ€™?
[1.647s]   140 |             if (distance < [01;31m[Kscan_data_[m[K->ranges[scan_index] - tolerance) {
[1.647s]       |                            [01;31m[K^~~~~~~~~~[m[K
[1.647s]       |                            [32m[Kscan_data[m[K
[1.651s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:140:47:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kscan_index[m[Kâ€™ was not declared in this scope
[1.651s]   140 | f (distance < scan_data_->ranges[[01;31m[Kscan_index[m[K] - tolerance) {
[1.651s]       |                                  [01;31m[K^~~~~~~~~~[m[K
[1.651s] 
[1.651s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:141:25:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[KINT_MAX[m[Kâ€™ was not declared in this scope
[1.651s]   141 |                 return -[01;31m[KINT_MAX[m[K;
[1.651s]       |                         [01;31m[K^~~~~~~[m[K
[1.651s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:19:1:[m[K [01;36m[Knote: [m[Kâ€˜[01m[KINT_MAX[m[Kâ€™ is defined in header â€˜[01m[K<climits>[m[Kâ€™; did you forget to â€˜[01m[K#include <climits>[m[Kâ€™?
[1.651s]    18 | #include <tf2/LinearMath/Matrix3x3.h>
[1.651s]   +++ |+[32m[K#include <climits>[m[K
[1.651s]    19 | 
[1.652s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:138:17:[m[K [01;35m[Kwarning: [m[Kunused variable â€˜[01m[Kindex[m[Kâ€™ [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wunused-variable-Wunused-variable]8;;[m[K]
[1.652s]   138 |             int [01;35m[Kindex[m[K = static_cast<int>((atan2(y - current_odom.pose.pose.position.y, x - current_odom.pose.pose.position.x)+M_PI) / (2*M_PI)) * scan_data.ranges.size();
[1.652s]       |                 [01;35m[K^~~~~[m[K
[1.652s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:[m[K In member function â€˜[01m[Kstd::pair<double, double> DWA_node::dwa_control(const std::vector<std::pair<double, double> >&, const Odometry&, const LaserScan&)[m[Kâ€™:
[1.652s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:148:29:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[KINT_MAX[m[Kâ€™ was not declared in this scope
[1.652s]   148 |         double best_score = [01;31m[KINT_MAX[m[K;
[1.652s]       |                             [01;31m[K^~~~~~~[m[K
[1.652s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:148:29:[m[K [01;36m[Knote: [m[Kâ€˜[01m[KINT_MAX[m[Kâ€™ is defined in header â€˜[01m[K<climits>[m[Kâ€™; did you forget to â€˜[01m[K#include <climits>[m[Kâ€™?
[1.656s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:152:12:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kodom_data[m[Kâ€™ was not declared in this scope; did you mean â€˜[01m[Krandom_data[m[Kâ€™?
[1.656s]   152 |         if([01;31m[Kodom_data[m[K==NULL || scan_data==NULL)
[1.656s]       |            [01;31m[K^~~~~~~~~[m[K
[1.656s]       |            [32m[Krandom_data[m[K
[1.659s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:152:31:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kscan_data[m[Kâ€™ was not declared in this scope
[1.660s]   152 |         if(odom_data==NULL || [01;31m[Kscan_data[m[K==NULL)
[1.660s]       |                               [01;31m[K^~~~~~~~~[m[K
[1.665s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:158:20:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kodom_data[m[Kâ€™ was not declared in this scope; did you mean â€˜[01m[Krandom_data[m[Kâ€™?
[1.665s]   158 |         double x = [01;31m[Kodom_data[m[K->pose.pose.position.x;
[1.665s]       |                    [01;31m[K^~~~~~~~~[m[K
[1.665s]       |                    [32m[Krandom_data[m[K
[1.665s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:160:29:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[KgetYaw[m[Kâ€™ is not a member of â€˜[01m[Ktf2[m[Kâ€™
[1.665s]   160 |         double theta = tf2::[01;31m[KgetYaw[m[K(odom_data->pose.pose.orientation);
[1.665s]       |                             [01;31m[K^~~~~~[m[K
[1.670s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:164:28:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kgoal_tolerance[m[Kâ€™ was not declared in this scope
[1.670s]   164 |         if(goal_distance < [01;31m[Kgoal_tolerance[m[K)
[1.670s]       |                            [01;31m[K^~~~~~~~~~~~~~[m[K
[1.670s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:171:16:[m[K [01;31m[Kerror: [m[Kredeclaration of â€˜[01m[Kdouble best_score[m[Kâ€™
[1.670s]   171 |         double [01;31m[Kbest_score[m[K = -INT_MAX;
[1.670s]       |                [01;31m[K^~~~~~~~~~[m[K
[1.670s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:148:16:[m[K [01;36m[Knote: [m[Kâ€˜[01m[Kdouble best_score[m[Kâ€™ previously declared here
[1.670s]   148 |         double [01;36m[Kbest_score[m[K = INT_MAX;
[1.670s]       |                [01;36m[K^~~~~~~~~~[m[K
[1.670s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:172:16:[m[K [01;31m[Kerror: [m[Kredeclaration of â€˜[01m[Kdouble best_speed[m[Kâ€™
[1.671s]   172 |         double [01;31m[Kbest_speed[m[K = 0.0, best_rotation_speed = 0.0;\
[1.671s]       |                [01;31m[K^~~~~~~~~~[m[K
[1.671s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:149:16:[m[K [01;36m[Knote: [m[Kâ€˜[01m[Kdouble best_speed[m[Kâ€™ previously declared here
[1.671s]   149 |         double [01;36m[Kbest_speed[m[K = 0.0;
[1.671s]       |                [01;36m[K^~~~~~~~~~[m[K
[1.671s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:172:34:[m[K [01;31m[Kerror: [m[Kredeclaration of â€˜[01m[Kdouble best_rotation_speed[m[Kâ€™
[1.671s]   172 |         double best_speed = 0.0, [01;31m[Kbest_rotation_speed[m[K = 0.0;\
[1.671s]       |                                  [01;31m[K^~~~~~~~~~~~~~~~~~~[m[K
[1.671s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:150:16:[m[K [01;36m[Knote: [m[Kâ€˜[01m[Kdouble best_rotation_speed[m[Kâ€™ previously declared here
[1.671s]   150 |         double [01;36m[Kbest_rotation_speed[m[K = 0.0;
[1.671s]       |                [01;36m[K^~~~~~~~~~~~~~~~~~~[m[K
[1.675s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:183:71:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kscan_data[m[Kâ€™ was not declared in this scope
[1.675s]   183 |  collision_avoidance(trajectory, [01;31m[Kscan_data[m[K, odom_data, tolerance);
[1.675s]       |                                  [01;31m[K^~~~~~~~~[m[K
[1.675s] 
[1.678s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:183:93:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Ktolerance[m[Kâ€™ was not declared in this scope
[1.679s]   183 | rajectory, scan_data, odom_data, [01;31m[Ktolerance[m[K);
[1.679s]       |                                  [01;31m[K^~~~~~~~~[m[K
[1.679s] 
[1.681s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:184:40:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kturn[m[Kâ€™ was not declared in this scope
[1.681s]   184 |       double smoothness_factor = [01;31m[Kturn[m[K*rotation_speed * 0.5;
[1.681s]       |                                  [01;31m[K^~~~[m[K
[1.682s] 
[1.685s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:187:16:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Ktotal_score[m[Kâ€™ was not declared in this scope
[1.686s]   187 |             if([01;31m[Ktotal_score[m[K > best_score)
[1.686s]       |                [01;31m[K^~~~~~~~~~~[m[K
[1.686s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:162:16:[m[K [01;35m[Kwarning: [m[Kunused variable â€˜[01m[Kgoal_angle[m[Kâ€™ [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wunused-variable-Wunused-variable]8;;[m[K]
[1.686s]   162 |         double [01;35m[Kgoal_angle[m[K = atan2(goal_y-y, goal_x-x)-theta;
[1.686s]       |                [01;35m[K^~~~~~~~~~[m[K
[1.686s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:146:74:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Ktrajectory[m[Kâ€™ [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wunused-parameter-Wunused-parameter]8;;[m[K]
[1.686s]   146 | [01;35m[Kst vector<pair<double, double>>& trajectory[m[K, const nav_msgs::msg::Odometry& odom, const sensor_msgs::msg::LaserScan& scan)
[1.686s]       | [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~[m[K
[1.686s] 
[1.686s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:146:117:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kodom[m[Kâ€™ [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wunused-parameter-Wunused-parameter]8;;[m[K]
[1.686s]   146 | , [01;35m[Kconst nav_msgs::msg::Odometry& odom[m[K, const sensor_msgs::msg::LaserScan& scan)
[1.686s]       |   [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~[m[K
[1.686s] 
[1.686s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:146:158:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kscan[m[Kâ€™ [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wunused-parameter-Wunused-parameter]8;;[m[K]
[1.686s]   146 | om, [01;35m[Kconst sensor_msgs::msg::LaserScan& scan[m[K)
[1.686s]       |     [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~[m[K
[1.686s] 
[1.690s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:[m[K In member function â€˜[01m[Kvoid DWA_node::timer_callback()[m[Kâ€™:
[1.690s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:204:13:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kodom_data[m[Kâ€™ was not declared in this scope; did you mean â€˜[01m[Krandom_data[m[Kâ€™?
[1.690s]   204 |         if(![01;31m[Kodom_data[m[K || !scan_data)
[1.690s]       |             [01;31m[K^~~~~~~~~[m[K
[1.690s]       |             [32m[Krandom_data[m[K
[1.694s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:204:27:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kscan_data[m[Kâ€™ was not declared in this scope
[1.694s]   204 |         if(!odom_data || ![01;31m[Kscan_data[m[K)
[1.694s]       |                           [01;31m[K^~~~~~~~~[m[K
[1.698s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:210:62:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Ktrajectory[m[Kâ€™ was not declared in this scope
[1.698s]   210 | st_rotation_speed] = dwa_control([01;31m[Ktrajectory[m[K, current_scan);
[1.698s]       |                                  [01;31m[K^~~~~~~~~~[m[K
[1.698s] 
[1.703s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:210:74:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kcurrent_scan[m[Kâ€™ was not declared in this scope
[1.703s]   210 | speed] = dwa_control(trajectory, [01;31m[Kcurrent_scan[m[K);
[1.703s]       |                                  [01;31m[K^~~~~~~~~~~~[m[K
[1.703s] 
[2.051s] In file included from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32[m[K,
[2.051s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29[m[K,
[2.051s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20[m[K,
[2.051s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25[m[K,
[2.051s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18[m[K,
[2.051s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20[m[K,
[2.051s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37[m[K,
[2.051s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25[m[K,
[2.051s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21[m[K,
[2.051s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155[m[K,
[2.051s]                  from [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:1[m[K:
[2.051s] /opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (DWA_node::*(DWA_node*, std::_Placeholder<1>))(const std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >*)>; MessageT = sensor_msgs::msg::LaserScan_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™:
[2.051s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = sensor_msgs::msg::LaserScan_<std::allocator<void> >; CallbackT = std::_Bind<void (DWA_node::*(DWA_node*, std::_Placeholder<1>))(const std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >*)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::LaserScan_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = sensor_msgs::msg::LaserScan_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.051s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::LaserScan_<std::allocator<void> >; CallbackT = std::_Bind<void (DWA_node::*(DWA_node*, std::_Placeholder<1>))(const std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >*)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::LaserScan_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = sensor_msgs::msg::LaserScan_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.051s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::LaserScan_<std::allocator<void> >; CallbackT = std::_Bind<void (DWA_node::*(DWA_node*, std::_Placeholder<1>))(const std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >*)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::LaserScan_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.051s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::LaserScan_<std::allocator<void> >; CallbackT = std::_Bind<void (DWA_node::*(DWA_node*, std::_Placeholder<1>))(const std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >*)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::LaserScan_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.051s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:31:64:[m[K   required from here
[2.052s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:[m[K [01;31m[Kerror: [m[Kno match for â€˜[01m[Koperator=[m[Kâ€™ (operand types are â€˜[01m[Krclcpp::detail::AnySubscriptionCallbackHelper<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void>, false>::variant_type[m[Kâ€™ {aka â€˜[01m[Kstd::variant<std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >[m[Kâ€™} and â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::_Bind<void (DWA_node::*(DWA_node*, std::_Placeholder<1>))(const std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >*)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(const std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >*)>[m[Kâ€™})
[2.052s]   394 |       [01;31m[Kcallback_variant_ = static_cast<typename scbth::callback_type>(callback)[m[K;
[2.052s]       |       [01;31m[K~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[2.052s] In file included from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:28[m[K,
[2.052s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:24[m[K,
[2.052s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20[m[K,
[2.052s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25[m[K,
[2.052s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18[m[K,
[2.052s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20[m[K,
[2.052s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37[m[K,
[2.052s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25[m[K,
[2.052s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21[m[K,
[2.052s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155[m[K,
[2.052s]                  from [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:1[m[K:
[2.052s] [01m[K/usr/include/c++/11/variant:1461:9:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Tp = _Tp; _Types = {std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™
[2.052s]  1461 |         [01;36m[Koperator[m[K=(_Tp&& __rhs)
[2.052s]       |         [01;36m[K^~~~~~~~[m[K
[2.052s] [01m[K/usr/include/c++/11/variant:1461:9:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[2.052s] /usr/include/c++/11/variant: In substitution of â€˜[01m[Ktemplate<class ... _Types> template<class _Tp, class> using __accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::function<void(const std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >*)>&&; <template-parameter-2-2> = void; _Types = {std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™:
[2.052s] [01m[K/usr/include/c++/11/variant:1457:14:[m[K   required by substitution of â€˜[01m[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&> std::variant<std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::operator=<_Tp>(_Tp&&) [with _Tp = std::function<void(const std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >*)>][m[Kâ€™
[2.052s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:[m[K   required from â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (DWA_node::*(DWA_node*, std::_Placeholder<1>))(const std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >*)>; MessageT = sensor_msgs::msg::LaserScan_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™
[2.052s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = sensor_msgs::msg::LaserScan_<std::allocator<void> >; CallbackT = std::_Bind<void (DWA_node::*(DWA_node*, std::_Placeholder<1>))(const std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >*)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::LaserScan_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = sensor_msgs::msg::LaserScan_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.052s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::LaserScan_<std::allocator<void> >; CallbackT = std::_Bind<void (DWA_node::*(DWA_node*, std::_Placeholder<1>))(const std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >*)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::LaserScan_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = sensor_msgs::msg::LaserScan_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.053s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::LaserScan_<std::allocator<void> >; CallbackT = std::_Bind<void (DWA_node::*(DWA_node*, std::_Placeholder<1>))(const std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >*)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::LaserScan_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.053s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::LaserScan_<std::allocator<void> >; CallbackT = std::_Bind<void (DWA_node::*(DWA_node*, std::_Placeholder<1>))(const std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >*)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::LaserScan_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.053s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:31:64:[m[K   required from here
[2.053s] [01m[K/usr/include/c++/11/variant:1375:15:[m[K [01;31m[Kerror: [m[Kno type named â€˜[01m[Ktype[m[Kâ€™ in â€˜[01m[Kstruct std::enable_if<false, void>[m[Kâ€™
[2.053s]  1375 |         using [01;31m[K__accepted_type[m[K = __to_type<__accepted_index<_Tp>>;
[2.053s]       |               [01;31m[K^~~~~~~~~~~~~~~[m[K
[2.053s] /opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (DWA_node::*(DWA_node*, std::_Placeholder<1>))(const std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >*)>; MessageT = sensor_msgs::msg::LaserScan_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™:
[2.053s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = sensor_msgs::msg::LaserScan_<std::allocator<void> >; CallbackT = std::_Bind<void (DWA_node::*(DWA_node*, std::_Placeholder<1>))(const std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >*)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::LaserScan_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = sensor_msgs::msg::LaserScan_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.053s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::LaserScan_<std::allocator<void> >; CallbackT = std::_Bind<void (DWA_node::*(DWA_node*, std::_Placeholder<1>))(const std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >*)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::LaserScan_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = sensor_msgs::msg::LaserScan_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.053s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::LaserScan_<std::allocator<void> >; CallbackT = std::_Bind<void (DWA_node::*(DWA_node*, std::_Placeholder<1>))(const std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >*)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::LaserScan_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.053s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::LaserScan_<std::allocator<void> >; CallbackT = std::_Bind<void (DWA_node::*(DWA_node*, std::_Placeholder<1>))(const std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >*)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::LaserScan_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.053s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:31:64:[m[K   required from here
[2.053s] [01m[K/usr/include/c++/11/variant:1398:16:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™
[2.053s]  1398 |       variant& [01;36m[Koperator[m[K=(const variant&) = default;
[2.053s]       |                [01;36m[K^~~~~~~~[m[K
[2.053s] [01m[K/usr/include/c++/11/variant:1398:26:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::_Bind<void (DWA_node::*(DWA_node*, std::_Placeholder<1>))(const std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >*)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(const std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >*)>[m[Kâ€™} to â€˜[01m[Kconst std::variant<std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&[m[Kâ€™
[2.053s]  1398 |       variant& operator=([01;36m[Kconst variant&[m[K) = default;
[2.053s]       |                          [01;36m[K^~~~~~~~~~~~~~[m[K
[2.053s] [01m[K/usr/include/c++/11/variant:1399:16:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™
[2.053s]  1399 |       variant& [01;36m[Koperator[m[K=(variant&&) = default;
[2.053s]       |                [01;36m[K^~~~~~~~[m[K
[2.053s] [01m[K/usr/include/c++/11/variant:1399:26:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::_Bind<void (DWA_node::*(DWA_node*, std::_Placeholder<1>))(const std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >*)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(const std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >*)>[m[Kâ€™} to â€˜[01m[Kstd::variant<std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&&[m[Kâ€™
[2.053s]  1399 |       variant& operator=([01;36m[Kvariant&&[m[K) = default;
[2.053s]       |                          [01;36m[K^~~~~~~~~[m[K
[2.089s] In file included from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32[m[K,
[2.089s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29[m[K,
[2.089s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20[m[K,
[2.089s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25[m[K,
[2.089s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18[m[K,
[2.089s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20[m[K,
[2.089s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37[m[K,
[2.089s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25[m[K,
[2.089s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21[m[K,
[2.089s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155[m[K,
[2.089s]                  from [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:1[m[K:
[2.089s] /opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (DWA_node::*(DWA_node*, std::_Placeholder<1>))(const std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >*)>; MessageT = nav_msgs::msg::Odometry_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™:
[2.089s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = nav_msgs::msg::Odometry_<std::allocator<void> >; CallbackT = std::_Bind<void (DWA_node::*(DWA_node*, std::_Placeholder<1>))(const std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >*)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<nav_msgs::msg::Odometry_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<nav_msgs::msg::Odometry_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = nav_msgs::msg::Odometry_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<nav_msgs::msg::Odometry_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.090s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = nav_msgs::msg::Odometry_<std::allocator<void> >; CallbackT = std::_Bind<void (DWA_node::*(DWA_node*, std::_Placeholder<1>))(const std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >*)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<nav_msgs::msg::Odometry_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<nav_msgs::msg::Odometry_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = nav_msgs::msg::Odometry_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<nav_msgs::msg::Odometry_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.090s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = nav_msgs::msg::Odometry_<std::allocator<void> >; CallbackT = std::_Bind<void (DWA_node::*(DWA_node*, std::_Placeholder<1>))(const std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >*)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<nav_msgs::msg::Odometry_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<nav_msgs::msg::Odometry_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<nav_msgs::msg::Odometry_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.090s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = nav_msgs::msg::Odometry_<std::allocator<void> >; CallbackT = std::_Bind<void (DWA_node::*(DWA_node*, std::_Placeholder<1>))(const std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >*)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<nav_msgs::msg::Odometry_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<nav_msgs::msg::Odometry_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<nav_msgs::msg::Odometry_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.090s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:32:60:[m[K   required from here
[2.090s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:[m[K [01;31m[Kerror: [m[Kno match for â€˜[01m[Koperator=[m[Kâ€™ (operand types are â€˜[01m[Krclcpp::detail::AnySubscriptionCallbackHelper<nav_msgs::msg::Odometry_<std::allocator<void> >, std::allocator<void>, false>::variant_type[m[Kâ€™ {aka â€˜[01m[Kstd::variant<std::function<void(const nav_msgs::msg::Odometry_<std::allocator<void> >&)>, std::function<void(const nav_msgs::msg::Odometry_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<nav_msgs::msg::Odometry_<std::allocator<void> >, std::default_delete<nav_msgs::msg::Odometry_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<nav_msgs::msg::Odometry_<std::allocator<void> >, std::default_delete<nav_msgs::msg::Odometry_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >[m[Kâ€™} and â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<nav_msgs::msg::Odometry_<std::allocator<void> >, std::_Bind<void (DWA_node::*(DWA_node*, std::_Placeholder<1>))(const std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >*)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(const std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >*)>[m[Kâ€™})
[2.090s]   394 |       [01;31m[Kcallback_variant_ = static_cast<typename scbth::callback_type>(callback)[m[K;
[2.090s]       |       [01;31m[K~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[2.090s] In file included from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:28[m[K,
[2.090s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:24[m[K,
[2.090s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20[m[K,
[2.090s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25[m[K,
[2.090s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18[m[K,
[2.090s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20[m[K,
[2.090s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37[m[K,
[2.090s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25[m[K,
[2.090s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21[m[K,
[2.090s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155[m[K,
[2.090s]                  from [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:1[m[K:
[2.090s] [01m[K/usr/include/c++/11/variant:1461:9:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Tp = _Tp; _Types = {std::function<void(const nav_msgs::msg::Odometry_<std::allocator<void> >&)>, std::function<void(const nav_msgs::msg::Odometry_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<nav_msgs::msg::Odometry_<std::allocator<void> >, std::default_delete<nav_msgs::msg::Odometry_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<nav_msgs::msg::Odometry_<std::allocator<void> >, std::default_delete<nav_msgs::msg::Odometry_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™
[2.090s]  1461 |         [01;36m[Koperator[m[K=(_Tp&& __rhs)
[2.090s]       |         [01;36m[K^~~~~~~~[m[K
[2.090s] [01m[K/usr/include/c++/11/variant:1461:9:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[2.090s] /usr/include/c++/11/variant: In substitution of â€˜[01m[Ktemplate<class ... _Types> template<class _Tp, class> using __accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::function<void(const std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >*)>&&; <template-parameter-2-2> = void; _Types = {std::function<void(const nav_msgs::msg::Odometry_<std::allocator<void> >&)>, std::function<void(const nav_msgs::msg::Odometry_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<nav_msgs::msg::Odometry_<std::allocator<void> >, std::default_delete<nav_msgs::msg::Odometry_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<nav_msgs::msg::Odometry_<std::allocator<void> >, std::default_delete<nav_msgs::msg::Odometry_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™:
[2.090s] [01m[K/usr/include/c++/11/variant:1457:14:[m[K   required by substitution of â€˜[01m[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::function<void(const nav_msgs::msg::Odometry_<std::allocator<void> >&)>, std::function<void(const nav_msgs::msg::Odometry_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<nav_msgs::msg::Odometry_<std::allocator<void> >, std::default_delete<nav_msgs::msg::Odometry_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<nav_msgs::msg::Odometry_<std::allocator<void> >, std::default_delete<nav_msgs::msg::Odometry_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::function<void(const nav_msgs::msg::Odometry_<std::allocator<void> >&)>, std::function<void(const nav_msgs::msg::Odometry_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<nav_msgs::msg::Odometry_<std::allocator<void> >, std::default_delete<nav_msgs::msg::Odometry_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<nav_msgs::msg::Odometry_<std::allocator<void> >, std::default_delete<nav_msgs::msg::Odometry_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::function<void(const nav_msgs::msg::Odometry_<std::allocator<void> >&)>, std::function<void(const nav_msgs::msg::Odometry_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<nav_msgs::msg::Odometry_<std::allocator<void> >, std::default_delete<nav_msgs::msg::Odometry_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<nav_msgs::msg::Odometry_<std::allocator<void> >, std::default_delete<nav_msgs::msg::Odometry_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::function<void(const nav_msgs::msg::Odometry_<std::allocator<void> >&)>, std::function<void(const nav_msgs::msg::Odometry_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<nav_msgs::msg::Odometry_<std::allocator<void> >, std::default_delete<nav_msgs::msg::Odometry_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<nav_msgs::msg::Odometry_<std::allocator<void> >, std::default_delete<nav_msgs::msg::Odometry_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&> std::variant<std::function<void(const nav_msgs::msg::Odometry_<std::allocator<void> >&)>, std::function<void(const nav_msgs::msg::Odometry_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<nav_msgs::msg::Odometry_<std::allocator<void> >, std::default_delete<nav_msgs::msg::Odometry_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<nav_msgs::msg::Odometry_<std::allocator<void> >, std::default_delete<nav_msgs::msg::Odometry_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::operator=<_Tp>(_Tp&&) [with _Tp = std::function<void(const std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >*)>][m[Kâ€™
[2.090s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:[m[K   required from â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (DWA_node::*(DWA_node*, std::_Placeholder<1>))(const std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >*)>; MessageT = nav_msgs::msg::Odometry_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™
[2.090s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = nav_msgs::msg::Odometry_<std::allocator<void> >; CallbackT = std::_Bind<void (DWA_node::*(DWA_node*, std::_Placeholder<1>))(const std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >*)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<nav_msgs::msg::Odometry_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<nav_msgs::msg::Odometry_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = nav_msgs::msg::Odometry_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<nav_msgs::msg::Odometry_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.090s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = nav_msgs::msg::Odometry_<std::allocator<void> >; CallbackT = std::_Bind<void (DWA_node::*(DWA_node*, std::_Placeholder<1>))(const std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >*)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<nav_msgs::msg::Odometry_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<nav_msgs::msg::Odometry_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = nav_msgs::msg::Odometry_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<nav_msgs::msg::Odometry_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.090s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = nav_msgs::msg::Odometry_<std::allocator<void> >; CallbackT = std::_Bind<void (DWA_node::*(DWA_node*, std::_Placeholder<1>))(const std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >*)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<nav_msgs::msg::Odometry_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<nav_msgs::msg::Odometry_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<nav_msgs::msg::Odometry_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.090s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = nav_msgs::msg::Odometry_<std::allocator<void> >; CallbackT = std::_Bind<void (DWA_node::*(DWA_node*, std::_Placeholder<1>))(const std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >*)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<nav_msgs::msg::Odometry_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<nav_msgs::msg::Odometry_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<nav_msgs::msg::Odometry_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.090s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:32:60:[m[K   required from here
[2.090s] [01m[K/usr/include/c++/11/variant:1375:15:[m[K [01;31m[Kerror: [m[Kno type named â€˜[01m[Ktype[m[Kâ€™ in â€˜[01m[Kstruct std::enable_if<false, void>[m[Kâ€™
[2.091s]  1375 |         using [01;31m[K__accepted_type[m[K = __to_type<__accepted_index<_Tp>>;
[2.091s]       |               [01;31m[K^~~~~~~~~~~~~~~[m[K
[2.091s] /opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (DWA_node::*(DWA_node*, std::_Placeholder<1>))(const std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >*)>; MessageT = nav_msgs::msg::Odometry_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™:
[2.091s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = nav_msgs::msg::Odometry_<std::allocator<void> >; CallbackT = std::_Bind<void (DWA_node::*(DWA_node*, std::_Placeholder<1>))(const std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >*)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<nav_msgs::msg::Odometry_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<nav_msgs::msg::Odometry_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = nav_msgs::msg::Odometry_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<nav_msgs::msg::Odometry_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.091s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = nav_msgs::msg::Odometry_<std::allocator<void> >; CallbackT = std::_Bind<void (DWA_node::*(DWA_node*, std::_Placeholder<1>))(const std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >*)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<nav_msgs::msg::Odometry_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<nav_msgs::msg::Odometry_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = nav_msgs::msg::Odometry_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<nav_msgs::msg::Odometry_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.091s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = nav_msgs::msg::Odometry_<std::allocator<void> >; CallbackT = std::_Bind<void (DWA_node::*(DWA_node*, std::_Placeholder<1>))(const std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >*)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<nav_msgs::msg::Odometry_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<nav_msgs::msg::Odometry_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<nav_msgs::msg::Odometry_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.091s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = nav_msgs::msg::Odometry_<std::allocator<void> >; CallbackT = std::_Bind<void (DWA_node::*(DWA_node*, std::_Placeholder<1>))(const std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >*)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<nav_msgs::msg::Odometry_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<nav_msgs::msg::Odometry_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<nav_msgs::msg::Odometry_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.091s] [01m[K/home/panav/ros2_ws/src/dwa_planner/src/dwa_node.cpp:32:60:[m[K   required from here
[2.091s] [01m[K/usr/include/c++/11/variant:1398:16:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::function<void(const nav_msgs::msg::Odometry_<std::allocator<void> >&)>, std::function<void(const nav_msgs::msg::Odometry_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<nav_msgs::msg::Odometry_<std::allocator<void> >, std::default_delete<nav_msgs::msg::Odometry_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<nav_msgs::msg::Odometry_<std::allocator<void> >, std::default_delete<nav_msgs::msg::Odometry_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™
[2.091s]  1398 |       variant& [01;36m[Koperator[m[K=(const variant&) = default;
[2.091s]       |                [01;36m[K^~~~~~~~[m[K
[2.091s] [01m[K/usr/include/c++/11/variant:1398:26:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<nav_msgs::msg::Odometry_<std::allocator<void> >, std::_Bind<void (DWA_node::*(DWA_node*, std::_Placeholder<1>))(const std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >*)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(const std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >*)>[m[Kâ€™} to â€˜[01m[Kconst std::variant<std::function<void(const nav_msgs::msg::Odometry_<std::allocator<void> >&)>, std::function<void(const nav_msgs::msg::Odometry_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<nav_msgs::msg::Odometry_<std::allocator<void> >, std::default_delete<nav_msgs::msg::Odometry_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<nav_msgs::msg::Odometry_<std::allocator<void> >, std::default_delete<nav_msgs::msg::Odometry_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&[m[Kâ€™
[2.091s]  1398 |       variant& operator=([01;36m[Kconst variant&[m[K) = default;
[2.091s]       |                          [01;36m[K^~~~~~~~~~~~~~[m[K
[2.091s] [01m[K/usr/include/c++/11/variant:1399:16:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::function<void(const nav_msgs::msg::Odometry_<std::allocator<void> >&)>, std::function<void(const nav_msgs::msg::Odometry_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<nav_msgs::msg::Odometry_<std::allocator<void> >, std::default_delete<nav_msgs::msg::Odometry_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<nav_msgs::msg::Odometry_<std::allocator<void> >, std::default_delete<nav_msgs::msg::Odometry_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™
[2.091s]  1399 |       variant& [01;36m[Koperator[m[K=(variant&&) = default;
[2.091s]       |                [01;36m[K^~~~~~~~[m[K
[2.091s] [01m[K/usr/include/c++/11/variant:1399:26:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<nav_msgs::msg::Odometry_<std::allocator<void> >, std::_Bind<void (DWA_node::*(DWA_node*, std::_Placeholder<1>))(const std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >*)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(const std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >*)>[m[Kâ€™} to â€˜[01m[Kstd::variant<std::function<void(const nav_msgs::msg::Odometry_<std::allocator<void> >&)>, std::function<void(const nav_msgs::msg::Odometry_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<nav_msgs::msg::Odometry_<std::allocator<void> >, std::default_delete<nav_msgs::msg::Odometry_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<nav_msgs::msg::Odometry_<std::allocator<void> >, std::default_delete<nav_msgs::msg::Odometry_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const nav_msgs::msg::Odometry_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<nav_msgs::msg::Odometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&&[m[Kâ€™
[2.091s]  1399 |       variant& operator=([01;36m[Kvariant&&[m[K) = default;
[2.091s]       |                          [01;36m[K^~~~~~~~~[m[K
[3.826s] gmake[2]: *** [CMakeFiles/dwa_node.dir/build.make:76: CMakeFiles/dwa_node.dir/src/dwa_node.cpp.o] Error 1
[3.826s] gmake[1]: *** [CMakeFiles/Makefile2:137: CMakeFiles/dwa_node.dir/all] Error 2
[3.827s] gmake: *** [Makefile:146: all] Error 2
[3.829s] Invoked command in '/home/panav/ros2_ws/src/dwa_planner/build/dwa_planner' returned '2': CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:/home/panav/ros2_ws/install/turtlebot3_teleop:/home/panav/ros2_ws/install/turtlebot3_example:/home/panav/ros2_ws/install/python_starter:/home/panav/ros2_ws/install/lidar_proximity_filter:/home/panav/ros2_ws/install/launch_testing_examples:/home/panav/ros2_ws/install/examples_rclpy_pointcloud_publisher:/home/panav/ros2_ws/install/examples_rclpy_minimal_subscriber:/home/panav/ros2_ws/install/examples_rclpy_minimal_service:/home/panav/ros2_ws/install/examples_rclpy_minimal_publisher:/home/panav/ros2_ws/install/examples_rclpy_minimal_client:/home/panav/ros2_ws/install/examples_rclpy_minimal_action_server:/home/panav/ros2_ws/install/examples_rclpy_minimal_action_client:/home/panav/ros2_ws/install/examples_rclpy_guard_conditions:/home/panav/ros2_ws/install/examples_rclpy_executors:/opt/ros/humble /usr/bin/cmake --build /home/panav/ros2_ws/src/dwa_planner/build/dwa_planner
